'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import PromptCard from '../components/PromptCard'
import { Textarea } from '@/components/ui/textarea'

// Mock data - replace with actual data fetching
const user = {
  name: 'John Doe',
  username: 'johndoe',
  email: 'john@example.com',
  avatar: '/placeholder-avatar.jpg',
  bio: 'AI enthusiast and prompt engineer',
}

const myPrompts = [
  {
    id: '1',
    title: 'Creative Writing Prompt',
    content: 'Write a short story about a world where gravity reverses every 12 hours.',
    author: user,
    category: 'Writing',
    promotions: 42,
    downvotes: 5,
    comments: 7,
    issues: 1,
    forks: 3,
    stars: 15,
    tags: ['writing', 'creative', 'sci-fi'],
    version: '1.0.0',
  },
  // Add more prompts as needed
]

const likedPrompts = [/* Similar structure to myPrompts */]
const starredPrompts = [/* Similar structure to myPrompts */]
const forks = [/* Similar structure to myPrompts */]
const issues = [
  {
    id: '1',
    title: 'Unclear instructions in prompt',
    description: 'The instructions in the creative writing prompt are a bit vague. Can we add more details?',
    status: 'Open',
    createdAt: '2023-05-15T10:30:00Z',
  },
  // Add more issues as needed
]
const pullRequests = [
  {
    id: '1',
    title: 'Add more details to creative writing prompt',
    description: 'I've added more specific instructions to make the prompt clearer.',
    status: 'Open',
    createdAt: '2023-05-16T14:45:00Z',
  },
  // Add more pull requests as needed
]

export default function UserProfile() {
  const [name, setName] = useState(user.name)
  const [username, setUsername] = useState(user.username)
  const [email, setEmail] = useState(user.email)
  const [bio, setBio] = useState(user.bio)
  const [openAIKey, setOpenAIKey] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Handle form submission here (e.g., send data to API)
    console.log({ name, username, email, bio, openAIKey })
  }

  return (
    <div className="container mx-auto p-4">
      <Card>
        <CardHeader>
          <div className="flex items-center space-x-4">
            <Avatar className="w-20 h-20">
              <AvatarImage src={user.avatar} />
              <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div>
              <CardTitle className="text-2xl">{user.name}</CardTitle>
              <CardDescription>@{user.username}</CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="profile">
            <TabsList>
              <TabsTrigger value="profile">Profile</TabsTrigger>
              <TabsTrigger value="prompts">My Prompts</TabsTrigger>
              <TabsTrigger value="liked">Liked</TabsTrigger>
              <TabsTrigger value="starred">Starred</TabsTrigger>
              <TabsTrigger value="forks">Forks</TabsTrigger>
              <TabsTrigger value="issues">Issues</TabsTrigger>
              <TabsTrigger value="pullrequests">Pull Requests</TabsTrigger>
            </TabsList>
            <TabsContent value="profile">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label htmlFor="name">Name</label>
                  <Input id="name" value={name} onChange={(e) => setName(e.target.value)} />
                </div>
                <div>
                  <label htmlFor="username">Username</label>
                  <Input id="username" value={username} onChange={(e) => setUsername(e.target.value)} />
                </div>
                <div>
                  <label htmlFor="email">Email</label>
                  <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
                </div>
                <div>
                  <label htmlFor="bio">Bio</label>
                  <Textarea id="bio" value={bio} onChange={(e) => setBio(e.target.value)} />
                </div>
                <div>
                  <label htmlFor="openai-key">OpenAI API Key</label>
                  <Input id="openai-key" type="password" value={openAIKey} onChange={(e) => setOpenAIKey(e.target.value)} />
                </div>
                <Button type="submit">Save Changes</Button>
              </form>
            </TabsContent>
            <TabsContent value="prompts">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {myPrompts.map((prompt) => (
                  <PromptCard key={prompt.id} {...prompt} />
                ))}
              </div>
            </TabsContent>
            <TabsContent value="liked">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {likedPrompts.map((prompt) => (
                  <PromptCard key={prompt.id} {...prompt} />
                ))}
              </div>
            </TabsContent>
            <TabsContent value="starred">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {starredPrompts.map((prompt) => (
                  <PromptCard key={prompt.id} {...prompt} />
                ))}
              </div>
            </TabsContent>
            <TabsContent value="forks">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {forks.map((prompt) => (
                  <PromptCard key={prompt.id} {...prompt} />
                ))}
              </div>
            </TabsContent>
            <TabsContent value="issues">
              <ul className="space-y-4">
                {issues.map((issue) => (
                  <li key={issue.id} className="border p-4 rounded-md">
                    <h3 className="font-bold">{issue.title}</h3>
                    <p className="text-sm text-gray-500">{issue.description}</p>
                    <div className="flex justify-between mt-2">
                      <span className="text-sm">{issue.status}</span>
                      <span className="text-sm">{new Date(issue.createdAt).toLocaleDateString()}</span>
                    </div>
                  </li>
                ))}
              </ul>
            </TabsContent>
            <TabsContent value="pullrequests">
              <ul className="space-y-4">
                {pullRequests.map((pr) => (
                  <li key={pr.id} className="border p-4 rounded-md">
                    <h3 className="font-bold">{pr.title}</h3>
                    <p className="text-sm text-gray-500">{pr.description}</p>
                    <div className="flex justify-between mt-2">
                      <span className="text-sm">{pr.status}</span>
                      <span className="text-sm">{new Date(pr.createdAt).toLocaleDateString()}</span>
                    </div>
                  </li>
                ))}
              </ul>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  )
}

